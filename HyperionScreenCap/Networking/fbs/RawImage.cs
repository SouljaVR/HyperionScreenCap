// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace hyperionnet
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct RawImage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RawImage GetRootAsRawImage(ByteBuffer _bb) { return GetRootAsRawImage(_bb, new RawImage()); }
  public static RawImage GetRootAsRawImage(ByteBuffer _bb, RawImage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RawImage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Data(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetDataArray() { return __p.__vector_as_array<byte>(4); }
  public bool MutateData(int j, byte data) { int o = __p.__offset(4); if (o != 0) { __p.bb.Put(__p.__vector(o) + j * 1, data); return true; } else { return false; } }
  public int Width { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }
  public bool MutateWidth(int width) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, width); return true; } else { return false; } }
  public int Height { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }
  public bool MutateHeight(int height) { int o = __p.__offset(8); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, height); return true; } else { return false; } }

public static Offset<hyperionnet.RawImage> CreateRawImage(FlatBufferBuilder builder,
    VectorOffset dataOffset = default(VectorOffset),
    int width = -1,
    int height = -1)
{
    builder.StartTable(3);
    RawImage.AddHeight(builder, height);
    RawImage.AddWidth(builder, width);
    if (dataOffset.Value != 0) // Check if data is not null
    {
        RawImage.AddData(builder, dataOffset);
    }
    return RawImage.EndRawImage(builder);
}

  public static void StartRawImage(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }

  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, byte[] data)
  {
      if (data == null || data.Length == 0) // Handle null or empty data case
      {
          // Return an empty vector if data is null or empty to avoid crashing
          return builder.EndVector();
      }

      builder.StartVector(1, data.Length, 1);
      for (int i = data.Length - 1; i >= 0; i--)
      {
          builder.AddByte(data[i]);
      }
      return builder.EndVector();
  }

  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddWidth(FlatBufferBuilder builder, int width) { builder.AddInt(1, width, -1); }
  public static void AddHeight(FlatBufferBuilder builder, int height) { builder.AddInt(2, height, -1); }
  public static Offset<hyperionnet.RawImage> EndRawImage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<hyperionnet.RawImage>(o);
  }
  public RawImageT UnPack() {
    var _o = new RawImageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RawImageT _o) {
    _o.Data = new List<byte>();
    for (var _j = 0; _j < this.DataLength; ++_j) {_o.Data.Add(this.Data(_j));}
    _o.Width = this.Width;
    _o.Height = this.Height;
  }
  public static Offset<hyperionnet.RawImage> Pack(FlatBufferBuilder builder, RawImageT _o) {
    if (_o == null) return default(Offset<hyperionnet.RawImage>);
    var _data = default(VectorOffset);
    if (_o.Data != null) {
      var __data = _o.Data.ToArray();
      _data = CreateDataVector(builder, __data);
    }
    return CreateRawImage(
      builder,
      _data,
      _o.Width,
      _o.Height);
  }
};

public class RawImageT
{
  public List<byte> Data { get; set; }
  public int Width { get; set; }
  public int Height { get; set; }

  public RawImageT() {
    this.Data = null;
    this.Width = -1;
    this.Height = -1;
  }
}


}
